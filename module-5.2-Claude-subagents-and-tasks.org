#+TITLE: Module 5.2 Claude subagents and tasks
#+SUBTITLE: parallel execution with subagents in git worktrees
#+AUTHOR: Peter Jun Koh
#+EMAIL: gopeterjun@naver.com
#+DESCRIPTION: parallel feature development using sub-agents
#+KEYWORDS: gen AI, LLM, claude, claude code, subagents, parallel execution
#+LANGUAGE: en

* Summary

- Created on: [2025-08-03 Sun]
- Last Updated: [2025-08-03 Sun 22:02]

Subagents are one of Claude Code's most powerful features for handling
complex projects and large codebases. They allow you to run multiple
specialized Claude instances in parallel, each with their own context and
focus area.

Subagents are lightweight instances of Claude Code running in a task via
the Task Tool. When a subagent is running, you can actually see that the
output says /Task(Performing task X)/.

The key benefits of subagents include:
- *Independent context windows*: Each subagent maintains its own context,
  preventing information overflow
- *Parallel execution*: Multiple subagents can work simultaneously on
  different aspects of your project
- *Specialized focus*: Each subagent can be given a specific domain or task
  to concentrate on

* Topics

** Basic Subagent Usage

*** Running Two Specialized Subagents

Here's a practical example of running two subagents to analyze different
parts of your application:

#+begin_quote
Can you run two subagents?
One of them should analyze improvements to the back-end that could be made.
One of them should analyze improvements that could be made to the front end.
Please run them in parallel.
#+end_quote

When you run this command, Claude Code will create two parallel tasks:

Each subagent will:
- Focus exclusively on their assigned domain (backend vs frontend)
- Use their own context window to dive deep into relevant files
- Provide specialized recommendations based on their area of expertise

*** Exploring Large Codebases

One interesting fact is that you can actually run multiple subagents in
parallel. For example, you can launch 4 parallel tasks with this prompt:

#+begin_quote
Explore the codebase using 4 tasks in parallel.
Each agent should explore different directories.
#+end_quote

This approach is particularly valuable for:
- *Large codebases*: When you need to understand multiple components quickly
- *Initial project assessment*: Getting a comprehensive overview without
  overwhelming a single context window
- *Domain separation*: Having different subagents focus on different
  architectural layers

** Tutorial: Subagents, Tasks, git worktree for parallel development

This tutorial shows how to use Claude Code's subagent system to implement
features in separate worktrees simultaneously, all from a single Claude
Code session. We want Claude Code to do all of the work of setting up work
trees, getting them ready for development, and spawning subtasks to work on
features in each worktree.

For all of this to work, it is critical that you have the right directory
structure AND run Claude Code in the correct folder. We will be running
Claude Code from a different location than we did in the past.

#+begin_src text
  /parent-directory/                    # <- Run Claude Code from HERE
  ‚îú‚îÄ‚îÄ expense-tracker-ai/               # Main project
#+end_src

First, start Claude Code in the Parent Directory. We will assume that the
directory name is =parent-directory=:

#+begin_src sh
  cd parent-directory
  claude
#+end_src

Next, create a custom command named ~parallel-agents~ by creating
the file =.claude/commands/parallel-agents.md= that contains the
following:

#+begin_src markdown
  I want to develop features in parallel using Git worktrees and subagents:
  $ARGUMENTS

  You are in the parent folder of the main repo. You will need to change to
  the main repo folder to create the worktrees.

  Please execute this complete workflow:

  PHASE 1 - SETUP WORKTREES:
  For each feature mentioned:
  1. Create a worktree at `../expense-tracker-[feature-name]` with branch
     `feature/[feature-name]`
  2. Set up the development environment in each worktree (if needed)
  3. List all worktrees created

  PHASE 2 - SPAWN SUBAGENTS:
  For each feature, run a subagent in parallel with these instructions:
  - You are working in the `expense-tracker-[feature-name]` worktree
    directory
  - This is a completely isolated development environment
  - Implement the `[feature-name]` feature with full functionality
  - Include proper testing and error handling
  - Compile and run tests, but don't attempt to run the application (e.g.,
    don't do `npm run` or `npm run dev &`, etc.)
  - When complete, write a detailed summary in `[feature-name].work.txt` in
    the main `expense-tracker-ai` directory
  - The summary should include: what was implemented, files created/modified,
    dependencies added, testing approach, and integration notes

  PHASE 3 - COORDINATION:
  - Monitor all subagents working in parallel
  - Ensure each subagent completes their feature implementation
  - Verify each subagent creates their work summary file

  PHASE 4 - FINAL SUMMARY:
  After all subagents complete:
  1. Read all the `.work.txt` files created by subagents
  2. Provide a comprehensive summary of what was accomplished
  3. List all features implemented and their status
  4. Provide next steps for integration

  Execute this complete parallel development workflow.
#+end_src

Now, let's execute our custom command =/parallel-agents= within the
Claude Code TUI.

#+begin_src text
  /parallel-agents Implement a simple top expense categories page and a simple top vendors page
#+end_src

You should see some amazing work on Claude Code's part that looks like
somewhat similar to this:

#+begin_src markdown
  ‚è∫ Let me check if this is a git repository first:

  ‚è∫ Bash(git status)
    ‚éø  On branch `feature_export_system`
       Changes not staged for commit:
         (use "git add <file>..." to update what will be committed)
       ‚Ä¶ +13 lines (ctrl+r to expand)

  ‚è∫ Good, we're already in the git repository. Now let me create the worktrees:

  ‚è∫ Bash(`git worktree add ../expense-tracker-top-expense-categories -b feature/top-expense-categories`)
    ‚éø  HEAD is now at 6637792 Merge branch 'feature/analytics-dashboard' into integration/export-analytics
       Preparing worktree (new branch 'feature/top-expense-categories')

  ‚è∫ Bash(`git worktree add ../expense-tracker-top-vendors -b feature/top-vendors`)
    ‚éø  HEAD is now at 6637792 Merge branch 'feature/analytics-dashboard' into integration/export-analytics
       Preparing worktree (new branch 'feature/top-vendors')

  ‚è∫ Update Todos
    ‚éø  ‚òí Change to main repo directory and set up worktrees
       ‚òí Create worktree for top expense categories feature
       ‚òí Create worktree for top vendors feature
       ‚òê Spawn parallel subagents for both features
       ‚òê Monitor subagent progress and collect summaries
       ‚òê Provide final comprehensive summary

  ‚è∫ Let me verify the worktrees were created and install dependencies:

  ‚è∫ Bash(`git worktree list`)
    ‚éø  `/Users/juleswhite/Downloads/ai-work/expense-tracker-ai`                      6637792 [`feature_export_system`]
       `/Users/juleswhite/Downloads/ai-work/expense-tracker-top-expense-categories` 6637792 [`feature/top-expense-categories`]
       `/Users/juleswhite/Downloads/ai-work/expense-tracker-top-vendors`             6637792 [`feature/top-vendors`]

  ‚è∫ Bash(`cd ../expense-tracker-top-expense-categories && npm install`)
    ‚éø  added 340 packages, and audited 341 packages in 5s

       137 packages are looking for funding
       ‚Ä¶ +3 lines (ctrl+r to expand)

  ‚è∫ Bash(`cd ../expense-tracker-top-vendors && npm install`)
    ‚éø  added 340 packages, and audited 341 packages in 5s

       137 packages are looking for funding
       ‚Ä¶ +3 lines (ctrl+r to expand)

  ‚è∫ Perfect! Now I'll spawn subagents to work on both features in parallel:

  ‚è∫ Task(Implement top expense categories)
    ‚éø  > expense-tracker-ai@0.1.0 build
       > next build

       ‚Ä¶ +26 lines (ctrl+r to expand)
       Bash(npm run build)
       Waiting‚Ä¶
       +11 more tool uses

  ‚è∫ Task(Implement top vendors page)
    ‚éø  Updated `../expense-tracker-top-vendors/app/components/Navigation.tsx` with 1 addition
       Bash(npm run build)
       Waiting‚Ä¶
       +11 more tool uses
#+end_src

At the very end, you should see something amazing like this:

#+begin_src markdown
  FINAL SUMMARY - Parallel Feature Development Complete
  =================================================================

  ,**Features Successfully Implemented**:

  1. Top Expense Categories Page (feature/top-expense-categories)

  - Location: `/app/categories/page.tsx`
  - Features:
    - Categories sorted by total spending with visual bar charts
    - Shows spending amounts, percentages, and transaction counts
    - Color-coded categories with emojis (Food üçï, Transportation üöó, etc.)
    - Summary statistics including total spending and top category
    - Real-time data synchronization across tabs
    - Loading and empty states

  2. Top Vendors Page (feature/top-vendors)

  - Location: `/app/vendors/page.tsx`
  - Features:
    - Vendors sorted by total spending (top 10)
    - Shows spending amounts, transaction counts, and last transaction dates
    - Dynamic color-coded bar charts for visual comparison
    - Summary cards with total vendors, spending, and top vendor
    - Aggregates expenses by description field (vendor name)
    - Responsive design with loading/empty states

  ,**Worktrees Created:**
  - `../expense-tracker-top-expense-categories` (branch:
    `feature/top-expense-categories`)
  - `../expense-tracker-top-vendors` (branch: `feature/top-vendors`)

  ,**Files Modified in Both Features:**
  - `/app/components/Navigation.tsx `- Added links for both new pages

  ,**Next Steps for Integration:**

  1. Merge `feature/top-expense-categories` into your integration branch
  2. Merge `feature/top-vendors` into your integration branch
  3. Resolve any navigation conflicts (both features modify `Navigation.tsx`)
  4. Test both features together in the integrated application
  5. Consider adding links from dashboard to these new analytics pages
#+end_src
